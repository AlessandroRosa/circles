<banana>plot a circle</banana>
<white>Type param /k to return all available keywords</white>
<white>Type param</white> <yellow>/h</yellow> <white>to watch help inside the terminal or</white> <yellow>/h html</yellow> <white>in a separate pop-up</white>

<lightblue>usage</lightblue> <snow>circle %center% radius:%value% border:%value% opacity:%value% drawcolor:%value% fillcolor:%value% %plane% %rec% $label %sector_range%</snow>

<lightblue>%center%</lightblue> <snow>circle center - example: (0,0)</snow>
<lightblue>%radius%</lightblue> <snow>any positive decimal value</snow>

<lightblue>%border%</lightblue> <snow>integer value</snow>
<cadetblue>Circle border thickness in pixels. 0 means 'no border'</cadetblue>

<lightblue>%opacity%</lightblue> <snow>from 0 to 1</snow>
<cadetblue>Opacity level for current circle. It follows %drawcolor% or %fillcolor%</cadetblue>

<lightblue>%drawcolor% %fillcolor%</lightblue> <snow>red | #FF0000 | rgb(255,0,0)</snow>
<cadetblue>Colors can be input by tags, rgb hex or rgb integer triplets. Type 'noclr' to skip it</cadetblue>

<lightblue>%plane%</lightblue> <snow>zplane | wplane | bip</snow>
<cadetblue>where the circle will be drawn</cadetblue>

<lightblue>%rec%</lightblue>
<cadetblue>record this circle for display after rendering, otherwise it won't be displayed after the next refresh</cadetblue>

<lightblue>%sector_range%</lightblue> <snow>[from_radians,to_radians]</snow>
<cadetblue>Sector for the current circle.</cadetblue>

<lightblue>circle (0,0) radius:1 drawcolor:yellow fillcolor: blue border:7 opacity:0.5 zplane sector:[30,120]</lightblue>
<cadetblue>Plot the arc of sector with blue border, from 30 degrees to 120 degrees and on the Z-plane</cadetblue>

<lightblue>circle (0,0) radius:1 drawcolor:blue fillcolor:yellow border:7 zplane label:<anything-without-blank-space> rec</lightblue>
<cadetblue>plot circle in the Z-plane, paint it yellow with blue border and set border thickness to 3 units, then record it with label $circle1</cadetblue>

<lightblue>circle (0,0) radius:1 drawcolor:blue fillcolor:yellow border:7 zplane label:<anything-without-blank-space> storagein</lightblue>
<cadetblue>same as before, but the circle is recorded into the dedicated storage space</cadetblue>

<lightblue>circle (0,0) radius:1 drawcolor:blue fillcolor:yellow border:7 zplane label:<anything-without-blank-space> storagein storagesubset:circles</lightblue>
<cadetblue>same as above, but the line is saved into the 'circles' storage space (if existing)</cadetblue>

<lightgray>-------------------------------</lightgray>
<turquoise>Note (1)</turquoise>
<cadetblue>If you need to work with inversion or with isometric disks, use cmd 'disk' instead</cadetblue>
<turquoise>Note (2)</turquoise>
<cadetblue>radius, line thickness and opacity must be input according to the above params sequence</cadetblue>
<turquoise>Note (3)</turquoise>
<cadetblue>params must follow the reported input order to work</cadetblue>
<turquoise>Note (4)</turquoise> <cadetblue>$labels can be used to refer to figures, as alternative to indexes</cadetblue>
<turquoise>Note (5)</turquoise>
<cadetblue>if you want to update later a circle entry, use these parameters</cadetblue>
<cadetblue>in'</cadetblue><white>figures</white><cadetblue>' cmd with '</cadetblue><white>update</white><cadetblue>' action</cadetblue>
<snow>center radius draw drawcolor fill fillcolor opacity thick</snow>
<lightblue>circle release</lightblue>
<cadetblue>return the latest release date for this command</cadetblue>